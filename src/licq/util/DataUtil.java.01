package licq.util;
import java.util.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import net.sf.json.*;
import org.codehaus.jackson.map.ObjectMapper;
import java.lang.reflect.*;

/**
强制转化成字符串或数字;
快速构造List、Set、Map;
由List<Map<String,Object>>构造出List、Set、Map

 */
public class DataUtil{
    private static final Logger logger = LoggerFactory.getLogger(DataUtil.class);

    // private static ObjectMapper mapper = new ObjectMapper();

    public <T> T toData(Object oo,T cc){
        return toData(oo,cc,false);
    }
    //空或异常时，返回默认值;bthrow异常时是否抛出
    public <T> T toData(Object oo,T cc,boolean isthrow){
        if(cc==null)return null;
        if(oo==null)return cc;

        if(cc instanceof String){
            return (T)oo.toString();
        }

        if(cc instanceof Number){
            String ss = oo.toString();

            int nindex = ss.indexOf(".");
            if(nindex>0){
                if(((cc instanceof Integer)==true)||((cc instanceof Long)==true)){
                    ss = ss.substring(0,nindex);
                }
            }

            try{
                Constructor c1=cc.getClass().getDeclaredConstructor(new Class[]{String.class});
                return (T)c1.newInstance(new Object[]{ss});
            }catch(Exception err){
                if(isthrow)throw new RuntimeException("数据转换时发生异常",err);
                return cc;
            }
        }

        if(JSONNull.getInstance().equals(oo))return cc;
        return (T)oo;
    }

    public <T> void addToList(List<T> resp,T cc,Object... list){
        if(resp==null||list==null)return;
        for(int i=0;i<list.length;i++){
            T obj = toData(list[i],cc);
            resp.add(obj);
        }
    }

    public <T> void addToSet(Set<T> resp,T cc,Object... list){
        if(resp==null||list==null)return;
        for(int i=0;i<list.length;i++){
            T obj = toData(list[i],cc);
            resp.add(obj);
        }
    }

    public <A,B> void putToMap(Map<A,B> resp,List<A> keys,List<B> vals){
        if(resp==null||keys==null||vals==null||vals.size()<keys.size())return;
        for(int i=0;i<keys.size();i++){
            resp.put(keys.get(i),vals.get(i));
        }
    }

    public <A,B> void putToMap(Map<A,B> resp,A[] keys,B[] vals){
        if(resp==null||keys==null||vals==null||vals.length<keys.length)return;
        for(int i=0;i<keys.length;i++){
            resp.put(keys[i],vals[i]);
        }
    }

    public <A,B> void putToMap(Map<A,B> resp,JSONObject json,A aa,B bb){
        if(resp==null||json==null||json.size()<=0)return;
        for(Object key : json.keySet()){//不能用Iterator iter = json.keys();，报错
            A aaa = toData(key,aa);
            B bbb = toData(json.get(key),bb);
            resp.put(aaa,bbb);
        }
    }

    public <A,B> void putToMap(Map<A,B> resp,Map json,A aa,B bb){
        if(resp==null||json==null||json.size()<=0)return;
        for(Object key : json.keySet()){//不能用Iterator iter = json.keys();，报错
            A aaa = toData(key,aa);
            B bbb = toData(json.get(key),bb);
            resp.put(aaa,bbb);
        }
    }

    //不定长参数转字符串
    public void appendToBuf(Appendable sb,String dot1,String dot2,Object... list){
        if(sb==null||list==null||list.length<=0)return;
        if(dot1==null)dot1="";
        if(dot2==null)dot2="";
        for(int i=0;i<list.length;i++){
            sb.append(dot1);
            String sss = String.valueOf(list[i]);
            sb.append(sss);
            sb.append(dot2);
        }
    }

    public <T> Set<List<T>> filterSet(List<Map<String,Object>> list,List<String> names,T cc){
        Set<List<T>> set = new LinkedHashSet<List<T>>();
        if(list==null||list.size()<=0)return set;
        for(Map<String,Object> map : list){
            List<T> tmplist = new ArrayList<T>();
            for(int i=0,nlen=names.size();i<nlen;i++){
                T sortid = toData(map.get(names.get(i)),cc);
                tmplist.add(sortid);
            }
            set.add(tmplist);
        }
        return set;
    }

    public Set<List<Object>> filterSet(List<Map<String,Object>> list,List<String> names){
        Set<List<Object>> set = new LinkedHashSet<List<Object>>();
        if(list==null||list.size()<=0)return set;
        for(Map<String,Object> map : list){
            List<Object> tmplist = new ArrayList<Object>();
            for(int i=0,nlen=names.size();i<nlen;i++){
                tmplist.add(map.get(names.get(i)));
            }
            set.add(tmplist);
        }
        return set;
    }


    public <T> Map<List<T>,Map<String,Object>> filterMap(List<Map<String,Object>> list,List<String> names,T cc){
        Map<List<T>,Map<String,Object>> resp = new LinkedHashMap<List<T>,Map<String,Object>>();
        if(list==null||list.size()<=0)return resp;
        for(Map<String,Object> map : list){
            List<T> tmplist = new ArrayList<T>();
            for(int i=0,nlen=names.size();i<nlen;i++){
                T sortid = toData(map.get(names.get(i)),cc);
                tmplist.add(sortid);
            }
            resp.put(tmplist,map);
        }
        return resp;
    }

    public Map<List<Object>,Map<String,Object>> filterMap(List<Map<String,Object>> list,List<String> names){
        Map<List<Object>,Map<String,Object>> resp = new LinkedHashMap<List<Object>,Map<String,Object>>();
        if(list==null||list.size()<=0)return resp;
        for(Map<String,Object> map : list){
            List<Object> tmplist = new ArrayList<Object>();
            for(int i=0,nlen=names.size();i<nlen;i++){
                tmplist.add(map.get(names.get(i)));
            }
            resp.put(tmplist,map);
        }
        return resp;
    }

    //从list中，取键名为name的记录组成Set
    public <T> Set<T> filterSet(List<Map<String,Object>> list,String name,T cc){
        Set<T> set = new LinkedHashSet<T>();
        if(list==null||list.size()<=0)return set;
        for(Map<String,Object> map : list){
            T sortid = toData(map.get(name),cc);
            set.add(sortid);
        }
        return set;
    }

    //并集+;差集-;交集*
    public <T> Set<T> operateSet(String flag,Set<T> t0,Set<T> t1){
        if(t0==null)t0=new HashSet<T>();
        if(t1==null)t1=new HashSet<T>();
        final Set<String> flagset = toSet("+","-","*");
        if(!flagset.contains(flag))return t0;
        Set<T> resp = new HashSet<T>(t0);
        if("+".equals(flag)){
            resp.addAll(t1);
        }else if("-".equals(flag)){
            resp.removeAll(t1);
        }else if("*".equals(flag)){
            resp.retainAll(t1);
        }
        return resp;
    }

    // public <T> Set<T> splitStringToSet(String s,String regex,T cc){
    //     Set<T> set = new LinkedHashSet<T>();
    //     if(s==null||s.length()<=0)return set;
    //     if(regex==null)regex="";
    //     return toSet(s.split(regex),cc);
    // }

    public Map<String,String> toStringMap(String[] name,Object[] obj,Map<String,String> resp){
        if(resp==null)resp = new LinkedHashMap<String,String>();
        if(name==null)return resp;
        if(obj==null||obj.length<name.length)return resp;
        for(int i=0;i<name.length;i++){
            resp.put(name[i],(obj[i]==null)?null:obj[i].toString());
        }
        return resp;
    }

    public <A,B> Map<A,B> json2Map(String json,A aa,B bb){
        if(json==null||json.length()<=0)return new LinkedHashMap<A,B>();
        JSONObject jsonobj = null;
        try{
            jsonobj = JSONObject.fromObject(json);
        }catch(Exception err){}
        return toMap(jsonobj,aa,bb);
    }


    public <A,B> Map<A,B> req2Map(javax.servlet.ServletRequest request){
        if(request==null)return new LinkedHashMap<A,B>();
        return request.getParameterMap();
    }

    //并集+;差集-;交集*
    public <A,B> Map<A,B> mapOpSet(String flag,Map<A,B> t0,Set<A> t1){
        if(t0==null)t0=new LinkedHashMap<A,B>();
        if(t1==null)t1=new LinkedHashSet<A>();

        final Set<String> flagset = toSet("-","*");
        if(!flagset.contains(flag))return t0;
        Map<A,B> resp = new LinkedHashMap<A,B>(t0);
        if("-".equals(flag)){
            resp.keySet().removeAll(t1);
        }else if("*".equals(flag)){
            // Set<A> t2 = new HashSet<A>(resp.keySet());
            // t2.removeAll(t1);
            // resp.keySet().removeAll(t2);
            resp.keySet().retainAll(t1);
        }
        return resp;
    }

    public <K,A,B> Map<K,Map<A,B>> list2Map(List<Map<A,B>> list,A fieldname,K keyval){
        Map<K,Map<A,B>> resp = new LinkedHashMap<K,Map<A,B>>();
        if(list==null||list.size()<=0)return resp;
        if(fieldname==null||keyval==null)return resp;
        for(Map<A,B> map : list){
            K key = toData(map.get(fieldname),keyval);
            resp.put(key,map);
        }
        return resp;
    }

    public <K,A,B> Map<K,List<Map<A,B>>> list2Map_3(List<Map<A,B>> list,A fieldname,K keyval){
        Map<K,List<Map<A,B>>> resp = new LinkedHashMap<K,List<Map<A,B>>>();
        if(list==null||list.size()<=0)return resp;
        if(fieldname==null||keyval==null)return resp;
        for(Map<A,B> map : list){
            K key = toData(map.get(fieldname),keyval);
            List<Map<A,B>> list2 = resp.get(key);
            if(list2==null){
                list2 = new ArrayList<Map<A,B>>();
                resp.put(key,list2);
            }
            list2.add(map);
        }
        return resp;
    }
}
